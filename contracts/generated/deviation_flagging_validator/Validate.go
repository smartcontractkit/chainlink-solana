// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package deviation_flagging_validator

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Validate is the `validate` instruction.
type Validate struct {
	FlaggingThreshold *uint32
	PreviousRoundId   *uint32
	PreviousAnswer    *ag_binary.Int128
	RoundId           *uint32
	Answer            *ag_binary.Int128

	// [0] = [WRITE] state
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [] accessController
	//
	// [3] = [] address
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewValidateInstructionBuilder creates a new `Validate` instruction builder.
func NewValidateInstructionBuilder() *Validate {
	nd := &Validate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetFlaggingThreshold sets the "flaggingThreshold" parameter.
func (inst *Validate) SetFlaggingThreshold(flaggingThreshold uint32) *Validate {
	inst.FlaggingThreshold = &flaggingThreshold
	return inst
}

// SetPreviousRoundId sets the "previousRoundId" parameter.
func (inst *Validate) SetPreviousRoundId(previousRoundId uint32) *Validate {
	inst.PreviousRoundId = &previousRoundId
	return inst
}

// SetPreviousAnswer sets the "previousAnswer" parameter.
func (inst *Validate) SetPreviousAnswer(previousAnswer ag_binary.Int128) *Validate {
	inst.PreviousAnswer = &previousAnswer
	return inst
}

// SetRoundId sets the "roundId" parameter.
func (inst *Validate) SetRoundId(roundId uint32) *Validate {
	inst.RoundId = &roundId
	return inst
}

// SetAnswer sets the "answer" parameter.
func (inst *Validate) SetAnswer(answer ag_binary.Int128) *Validate {
	inst.Answer = &answer
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *Validate) SetStateAccount(state ag_solanago.PublicKey) *Validate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Validate) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Validate) SetAuthorityAccount(authority ag_solanago.PublicKey) *Validate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Validate) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAccessControllerAccount sets the "accessController" account.
func (inst *Validate) SetAccessControllerAccount(accessController ag_solanago.PublicKey) *Validate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(accessController)
	return inst
}

// GetAccessControllerAccount gets the "accessController" account.
func (inst *Validate) GetAccessControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetAddressAccount sets the "address" account.
func (inst *Validate) SetAddressAccount(address ag_solanago.PublicKey) *Validate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(address)
	return inst
}

// GetAddressAccount gets the "address" account.
func (inst *Validate) GetAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

func (inst Validate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Validate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Validate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Validate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FlaggingThreshold == nil {
			return errors.New("FlaggingThreshold parameter is not set")
		}
		if inst.PreviousRoundId == nil {
			return errors.New("PreviousRoundId parameter is not set")
		}
		if inst.PreviousAnswer == nil {
			return errors.New("PreviousAnswer parameter is not set")
		}
		if inst.RoundId == nil {
			return errors.New("RoundId parameter is not set")
		}
		if inst.Answer == nil {
			return errors.New("Answer parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AccessController is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Address is not set")
		}
	}
	return nil
}

func (inst *Validate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Validate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("FlaggingThreshold", *inst.FlaggingThreshold))
						paramsBranch.Child(ag_format.Param("  PreviousRoundId", *inst.PreviousRoundId))
						paramsBranch.Child(ag_format.Param("   PreviousAnswer", *inst.PreviousAnswer))
						paramsBranch.Child(ag_format.Param("          RoundId", *inst.RoundId))
						paramsBranch.Child(ag_format.Param("           Answer", *inst.Answer))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("accessController", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("         address", inst.AccountMetaSlice[3]))
					})
				})
		})
}

func (obj Validate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FlaggingThreshold` param:
	err = encoder.Encode(obj.FlaggingThreshold)
	if err != nil {
		return err
	}
	// Serialize `PreviousRoundId` param:
	err = encoder.Encode(obj.PreviousRoundId)
	if err != nil {
		return err
	}
	// Serialize `PreviousAnswer` param:
	err = encoder.Encode(obj.PreviousAnswer)
	if err != nil {
		return err
	}
	// Serialize `RoundId` param:
	err = encoder.Encode(obj.RoundId)
	if err != nil {
		return err
	}
	// Serialize `Answer` param:
	err = encoder.Encode(obj.Answer)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Validate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FlaggingThreshold`:
	err = decoder.Decode(&obj.FlaggingThreshold)
	if err != nil {
		return err
	}
	// Deserialize `PreviousRoundId`:
	err = decoder.Decode(&obj.PreviousRoundId)
	if err != nil {
		return err
	}
	// Deserialize `PreviousAnswer`:
	err = decoder.Decode(&obj.PreviousAnswer)
	if err != nil {
		return err
	}
	// Deserialize `RoundId`:
	err = decoder.Decode(&obj.RoundId)
	if err != nil {
		return err
	}
	// Deserialize `Answer`:
	err = decoder.Decode(&obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

// NewValidateInstruction declares a new Validate instruction with the provided parameters and accounts.
func NewValidateInstruction(
	// Parameters:
	flaggingThreshold uint32,
	previousRoundId uint32,
	previousAnswer ag_binary.Int128,
	roundId uint32,
	answer ag_binary.Int128,
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	accessController ag_solanago.PublicKey,
	address ag_solanago.PublicKey) *Validate {
	return NewValidateInstructionBuilder().
		SetFlaggingThreshold(flaggingThreshold).
		SetPreviousRoundId(previousRoundId).
		SetPreviousAnswer(previousAnswer).
		SetRoundId(roundId).
		SetAnswer(answer).
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetAccessControllerAccount(accessController).
		SetAddressAccount(address)
}
