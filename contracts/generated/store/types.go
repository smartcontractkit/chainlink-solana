// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package store

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Flags struct {
	Xs  [128]ag_solanago.PublicKey
	Len uint64
}

func (obj Flags) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Xs` param:
	err = encoder.Encode(obj.Xs)
	if err != nil {
		return err
	}
	// Serialize `Len` param:
	err = encoder.Encode(obj.Len)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Flags) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Xs`:
	err = decoder.Decode(&obj.Xs)
	if err != nil {
		return err
	}
	// Deserialize `Len`:
	err = decoder.Decode(&obj.Len)
	if err != nil {
		return err
	}
	return nil
}

type Transmission struct {
	Timestamp uint64
	Answer    ag_binary.Int128
}

func (obj Transmission) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Answer` param:
	err = encoder.Encode(obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Transmission) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Answer`:
	err = decoder.Decode(&obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

type Scope interface {
	isScope()
}

type scopeContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	Version         Version_
	RoundData       RoundData
	LatestRoundData LatestRoundData
	Aggregator      Aggregator
}

type Version_ uint8

func (obj Version_) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *Version_) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *Version_) isScope() {}

type RoundData struct {
	RoundId uint32
}

func (obj RoundData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RoundId` param:
	err = encoder.Encode(obj.RoundId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RoundData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RoundId`:
	err = decoder.Decode(&obj.RoundId)
	if err != nil {
		return err
	}
	return nil
}

func (_ *RoundData) isScope() {}

type LatestRoundData uint8

func (obj LatestRoundData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *LatestRoundData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *LatestRoundData) isScope() {}

type Aggregator uint8

func (obj Aggregator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *Aggregator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *Aggregator) isScope() {}
