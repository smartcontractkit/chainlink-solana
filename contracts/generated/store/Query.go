// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package store

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Query is the `query` instruction.
type Query struct {
	Scope Scope

	// [0] = [] feed
	//
	// [1] = [WRITE] buffer
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewQueryInstructionBuilder creates a new `Query` instruction builder.
func NewQueryInstructionBuilder() *Query {
	nd := &Query{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetScope sets the "scope" parameter.
func (inst *Query) SetScope(scope Scope) *Query {
	inst.Scope = scope
	return inst
}

// SetFeedAccount sets the "feed" account.
func (inst *Query) SetFeedAccount(feed ag_solanago.PublicKey) *Query {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(feed)
	return inst
}

// GetFeedAccount gets the "feed" account.
func (inst *Query) GetFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetBufferAccount sets the "buffer" account.
func (inst *Query) SetBufferAccount(buffer ag_solanago.PublicKey) *Query {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(buffer).WRITE()
	return inst
}

// GetBufferAccount gets the "buffer" account.
func (inst *Query) GetBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

func (inst Query) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Query,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Query) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Query) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Scope == nil {
			return errors.New("Scope parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Feed is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Buffer is not set")
		}
	}
	return nil
}

func (inst *Query) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Query")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Scope", inst.Scope))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  feed", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("buffer", inst.AccountMetaSlice[1]))
					})
				})
		})
}

func (obj Query) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Scope` param:
	{
		tmp := scopeContainer{}
		switch realvalue := obj.Scope.(type) {
		case *Version_:
			tmp.Enum = 0
			tmp.Version = *realvalue
		case *Decimals_:
			tmp.Enum = 1
			tmp.Decimals = *realvalue
		case *Description_:
			tmp.Enum = 2
			tmp.Description = *realvalue
		case *RoundData:
			tmp.Enum = 3
			tmp.RoundData = *realvalue
		case *LatestRoundData:
			tmp.Enum = 4
			tmp.LatestRoundData = *realvalue
		case *Aggregator:
			tmp.Enum = 5
			tmp.Aggregator = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *Query) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Scope`:
	{
		tmp := new(scopeContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Scope = (*Version_)(&tmp.Enum)
		case 1:
			obj.Scope = (*Decimals_)(&tmp.Enum)
		case 2:
			obj.Scope = (*Description_)(&tmp.Enum)
		case 3:
			obj.Scope = &tmp.RoundData
		case 4:
			obj.Scope = (*LatestRoundData)(&tmp.Enum)
		case 5:
			obj.Scope = (*Aggregator)(&tmp.Enum)
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewQueryInstruction declares a new Query instruction with the provided parameters and accounts.
func NewQueryInstruction(
	// Parameters:
	scope Scope,
	// Accounts:
	feed ag_solanago.PublicKey,
	buffer ag_solanago.PublicKey) *Query {
	return NewQueryInstructionBuilder().
		SetScope(scope).
		SetFeedAccount(feed).
		SetBufferAccount(buffer)
}
