// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package store

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetWriter is the `setWriter` instruction.
type SetWriter struct {
	Writer *ag_solanago.PublicKey

	// [0] = [WRITE] feed
	//
	// [1] = [] owner
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewSetWriterInstructionBuilder creates a new `SetWriter` instruction builder.
func NewSetWriterInstructionBuilder() *SetWriter {
	nd := &SetWriter{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetWriter sets the "writer" parameter.
func (inst *SetWriter) SetWriter(writer ag_solanago.PublicKey) *SetWriter {
	inst.Writer = &writer
	return inst
}

// SetFeedAccount sets the "feed" account.
func (inst *SetWriter) SetFeedAccount(feed ag_solanago.PublicKey) *SetWriter {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(feed).WRITE()
	return inst
}

// GetFeedAccount gets the "feed" account.
func (inst *SetWriter) GetFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOwnerAccount sets the "owner" account.
func (inst *SetWriter) SetOwnerAccount(owner ag_solanago.PublicKey) *SetWriter {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *SetWriter) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetWriter) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetWriter {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetWriter) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

func (inst SetWriter) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetWriter,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetWriter) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetWriter) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Writer == nil {
			return errors.New("Writer parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Feed is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *SetWriter) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetWriter")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Writer", *inst.Writer))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     feed", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("    owner", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice[2]))
					})
				})
		})
}

func (obj SetWriter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Writer` param:
	err = encoder.Encode(obj.Writer)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetWriter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Writer`:
	err = decoder.Decode(&obj.Writer)
	if err != nil {
		return err
	}
	return nil
}

// NewSetWriterInstruction declares a new SetWriter instruction with the provided parameters and accounts.
func NewSetWriterInstruction(
	// Parameters:
	writer ag_solanago.PublicKey,
	// Accounts:
	feed ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *SetWriter {
	return NewSetWriterInstructionBuilder().
		SetWriter(writer).
		SetFeedAccount(feed).
		SetOwnerAccount(owner).
		SetAuthorityAccount(authority)
}
