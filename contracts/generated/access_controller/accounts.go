// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package access_controller

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AccessController struct {
	Owner      ag_solanago.PublicKey
	AccessList AccessList
}

var AccessControllerDiscriminator = [8]byte{143, 45, 12, 204, 220, 20, 114, 87}

func (obj AccessController) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AccessControllerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `AccessList` param:
	err = encoder.Encode(obj.AccessList)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AccessController) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AccessControllerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[143 45 12 204 220 20 114 87]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `AccessList`:
	err = decoder.Decode(&obj.AccessList)
	if err != nil {
		return err
	}
	return nil
}
