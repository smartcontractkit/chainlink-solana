// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ocr_2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawPayment is the `withdrawPayment` instruction.
type WithdrawPayment struct {

	// [0] = [WRITE] state
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] tokenVault
	//
	// [3] = [] vaultAuthority
	//
	// [4] = [WRITE] payee
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewWithdrawPaymentInstructionBuilder creates a new `WithdrawPayment` instruction builder.
func NewWithdrawPaymentInstructionBuilder() *WithdrawPayment {
	nd := &WithdrawPayment{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *WithdrawPayment) SetStateAccount(state ag_solanago.PublicKey) *WithdrawPayment {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *WithdrawPayment) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawPayment) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawPayment {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawPayment) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetTokenVaultAccount sets the "tokenVault" account.
func (inst *WithdrawPayment) SetTokenVaultAccount(tokenVault ag_solanago.PublicKey) *WithdrawPayment {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenVault).WRITE()
	return inst
}

// GetTokenVaultAccount gets the "tokenVault" account.
func (inst *WithdrawPayment) GetTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetVaultAuthorityAccount sets the "vaultAuthority" account.
func (inst *WithdrawPayment) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *WithdrawPayment {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultAuthority)
	return inst
}

// GetVaultAuthorityAccount gets the "vaultAuthority" account.
func (inst *WithdrawPayment) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetPayeeAccount sets the "payee" account.
func (inst *WithdrawPayment) SetPayeeAccount(payee ag_solanago.PublicKey) *WithdrawPayment {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payee).WRITE()
	return inst
}

// GetPayeeAccount gets the "payee" account.
func (inst *WithdrawPayment) GetPayeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawPayment) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawPayment {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawPayment) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

func (inst WithdrawPayment) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawPayment,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawPayment) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawPayment) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payee is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawPayment) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawPayment")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("    tokenVault", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("vaultAuthority", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("         payee", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice[5]))
					})
				})
		})
}

func (obj WithdrawPayment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawPayment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawPaymentInstruction declares a new WithdrawPayment instruction with the provided parameters and accounts.
func NewWithdrawPaymentInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	payee ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawPayment {
	return NewWithdrawPaymentInstructionBuilder().
		SetStateAccount(state).
		SetAuthorityAccount(authority).
		SetTokenVaultAccount(tokenVault).
		SetVaultAuthorityAccount(vaultAuthority).
		SetPayeeAccount(payee).
		SetTokenProgramAccount(tokenProgram)
}
