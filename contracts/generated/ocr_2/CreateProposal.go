// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ocr_2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateProposal is the `createProposal` instruction.
type CreateProposal struct {
	OffchainConfigVersion *uint64

	// [0] = [WRITE] proposal
	//
	// [1] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewCreateProposalInstructionBuilder creates a new `CreateProposal` instruction builder.
func NewCreateProposalInstructionBuilder() *CreateProposal {
	nd := &CreateProposal{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetOffchainConfigVersion sets the "offchainConfigVersion" parameter.
func (inst *CreateProposal) SetOffchainConfigVersion(offchainConfigVersion uint64) *CreateProposal {
	inst.OffchainConfigVersion = &offchainConfigVersion
	return inst
}

// SetProposalAccount sets the "proposal" account.
func (inst *CreateProposal) SetProposalAccount(proposal ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *CreateProposal) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CreateProposal) SetAuthorityAccount(authority ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CreateProposal) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

func (inst CreateProposal) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateProposal,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateProposal) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateProposal) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OffchainConfigVersion == nil {
			return errors.New("OffchainConfigVersion parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *CreateProposal) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateProposal")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OffchainConfigVersion", *inst.OffchainConfigVersion))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" proposal", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice[1]))
					})
				})
		})
}

func (obj CreateProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OffchainConfigVersion` param:
	err = encoder.Encode(obj.OffchainConfigVersion)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OffchainConfigVersion`:
	err = decoder.Decode(&obj.OffchainConfigVersion)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateProposalInstruction declares a new CreateProposal instruction with the provided parameters and accounts.
func NewCreateProposalInstruction(
	// Parameters:
	offchainConfigVersion uint64,
	// Accounts:
	proposal ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *CreateProposal {
	return NewCreateProposalInstructionBuilder().
		SetOffchainConfigVersion(offchainConfigVersion).
		SetProposalAccount(proposal).
		SetAuthorityAccount(authority)
}
