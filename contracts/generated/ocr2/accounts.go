// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ocr_2

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type LatestConfig struct {
	ConfigCount  uint32
	ConfigDigest [32]uint8
	BlockNumber  uint64
}

var LatestConfigDiscriminator = [8]byte{108, 67, 202, 204, 245, 72, 177, 226}

func (obj LatestConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LatestConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ConfigCount` param:
	err = encoder.Encode(obj.ConfigCount)
	if err != nil {
		return err
	}
	// Serialize `ConfigDigest` param:
	err = encoder.Encode(obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Serialize `BlockNumber` param:
	err = encoder.Encode(obj.BlockNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LatestConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LatestConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[108 67 202 204 245 72 177 226]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ConfigCount`:
	err = decoder.Decode(&obj.ConfigCount)
	if err != nil {
		return err
	}
	// Deserialize `ConfigDigest`:
	err = decoder.Decode(&obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Deserialize `BlockNumber`:
	err = decoder.Decode(&obj.BlockNumber)
	if err != nil {
		return err
	}
	return nil
}

type LinkAvailableForPayment struct {
	AvailableBalance uint64
}

var LinkAvailableForPaymentDiscriminator = [8]byte{28, 101, 118, 52, 192, 247, 251, 134}

func (obj LinkAvailableForPayment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LinkAvailableForPaymentDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `AvailableBalance` param:
	err = encoder.Encode(obj.AvailableBalance)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LinkAvailableForPayment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LinkAvailableForPaymentDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[28 101 118 52 192 247 251 134]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `AvailableBalance`:
	err = decoder.Decode(&obj.AvailableBalance)
	if err != nil {
		return err
	}
	return nil
}

type OracleObservationCount struct {
	Count uint32
}

var OracleObservationCountDiscriminator = [8]byte{239, 168, 10, 2, 150, 165, 77, 107}

func (obj OracleObservationCount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OracleObservationCountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleObservationCount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OracleObservationCountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[239 168 10 2 150 165 77 107]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	Version               uint8
	Nonce                 uint8
	Padding0              uint16
	Padding1              uint32
	Config                Config
	OffchainConfig        OffchainConfig
	PendingOffchainConfig OffchainConfig
	Oracles               Oracles
	LeftoverPayments      LeftoverPayments
	Transmissions         ag_solanago.PublicKey
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `OffchainConfig` param:
	err = encoder.Encode(obj.OffchainConfig)
	if err != nil {
		return err
	}
	// Serialize `PendingOffchainConfig` param:
	err = encoder.Encode(obj.PendingOffchainConfig)
	if err != nil {
		return err
	}
	// Serialize `Oracles` param:
	err = encoder.Encode(obj.Oracles)
	if err != nil {
		return err
	}
	// Serialize `LeftoverPayments` param:
	err = encoder.Encode(obj.LeftoverPayments)
	if err != nil {
		return err
	}
	// Serialize `Transmissions` param:
	err = encoder.Encode(obj.Transmissions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `OffchainConfig`:
	err = decoder.Decode(&obj.OffchainConfig)
	if err != nil {
		return err
	}
	// Deserialize `PendingOffchainConfig`:
	err = decoder.Decode(&obj.PendingOffchainConfig)
	if err != nil {
		return err
	}
	// Deserialize `Oracles`:
	err = decoder.Decode(&obj.Oracles)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverPayments`:
	err = decoder.Decode(&obj.LeftoverPayments)
	if err != nil {
		return err
	}
	// Deserialize `Transmissions`:
	err = decoder.Decode(&obj.Transmissions)
	if err != nil {
		return err
	}
	return nil
}
