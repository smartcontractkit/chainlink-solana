// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkgsolana "github.com/smartcontractkit/chainlink-solana/pkg/solana"

	rpc "github.com/gagliardetto/solana-go/rpc"

	solana "github.com/gagliardetto/solana-go"

	testing "testing"
)

// ChainReader is an autogenerated mock type for the ChainReader type
type ChainReader struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, account, commitment
func (_m *ChainReader) GetBalance(ctx context.Context, account solana.PublicKey, commitment rpc.CommitmentType) (*rpc.GetBalanceResult, error) {
	ret := _m.Called(ctx, account, commitment)

	var r0 *rpc.GetBalanceResult
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, rpc.CommitmentType) *rpc.GetBalanceResult); ok {
		r0 = rf(ctx, account, commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetBalanceResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, rpc.CommitmentType) error); ok {
		r1 = rf(ctx, account, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestTransmission provides a mock function with given fields: ctx, account, commitment
func (_m *ChainReader) GetLatestTransmission(ctx context.Context, account solana.PublicKey, commitment rpc.CommitmentType) (pkgsolana.Answer, uint64, error) {
	ret := _m.Called(ctx, account, commitment)

	var r0 pkgsolana.Answer
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, rpc.CommitmentType) pkgsolana.Answer); ok {
		r0 = rf(ctx, account, commitment)
	} else {
		r0 = ret.Get(0).(pkgsolana.Answer)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, rpc.CommitmentType) uint64); ok {
		r1 = rf(ctx, account, commitment)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, solana.PublicKey, rpc.CommitmentType) error); ok {
		r2 = rf(ctx, account, commitment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSignaturesForAddressWithOpts provides a mock function with given fields: ctx, account, opts
func (_m *ChainReader) GetSignaturesForAddressWithOpts(ctx context.Context, account solana.PublicKey, opts *rpc.GetSignaturesForAddressOpts) ([]*rpc.TransactionSignature, error) {
	ret := _m.Called(ctx, account, opts)

	var r0 []*rpc.TransactionSignature
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, *rpc.GetSignaturesForAddressOpts) []*rpc.TransactionSignature); ok {
		r0 = rf(ctx, account, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.TransactionSignature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, *rpc.GetSignaturesForAddressOpts) error); ok {
		r1 = rf(ctx, account, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: ctx, account, commitment
func (_m *ChainReader) GetState(ctx context.Context, account solana.PublicKey, commitment rpc.CommitmentType) (pkgsolana.State, uint64, error) {
	ret := _m.Called(ctx, account, commitment)

	var r0 pkgsolana.State
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, rpc.CommitmentType) pkgsolana.State); ok {
		r0 = rf(ctx, account, commitment)
	} else {
		r0 = ret.Get(0).(pkgsolana.State)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, rpc.CommitmentType) uint64); ok {
		r1 = rf(ctx, account, commitment)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, solana.PublicKey, rpc.CommitmentType) error); ok {
		r2 = rf(ctx, account, commitment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTokenAccountBalance provides a mock function with given fields: ctx, account, commitment
func (_m *ChainReader) GetTokenAccountBalance(ctx context.Context, account solana.PublicKey, commitment rpc.CommitmentType) (*rpc.GetTokenAccountBalanceResult, error) {
	ret := _m.Called(ctx, account, commitment)

	var r0 *rpc.GetTokenAccountBalanceResult
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, rpc.CommitmentType) *rpc.GetTokenAccountBalanceResult); ok {
		r0 = rf(ctx, account, commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetTokenAccountBalanceResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, rpc.CommitmentType) error); ok {
		r1 = rf(ctx, account, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, txSig, opts
func (_m *ChainReader) GetTransaction(ctx context.Context, txSig solana.Signature, opts *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error) {
	ret := _m.Called(ctx, txSig, opts)

	var r0 *rpc.GetTransactionResult
	if rf, ok := ret.Get(0).(func(context.Context, solana.Signature, *rpc.GetTransactionOpts) *rpc.GetTransactionResult); ok {
		r0 = rf(ctx, txSig, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetTransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, solana.Signature, *rpc.GetTransactionOpts) error); ok {
		r1 = rf(ctx, txSig, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChainReader creates a new instance of ChainReader. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainReader(t testing.TB) *ChainReader {
	mock := &ChainReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
