// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	metrics "github.com/smartcontractkit/chainlink-solana/pkg/monitoring/metrics"
	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// FeedBalances is an autogenerated mock type for the FeedBalances type
type FeedBalances struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: balanceAccountName, feedInput
func (_m *FeedBalances) Cleanup(balanceAccountName string, feedInput metrics.FeedInput) {
	_m.Called(balanceAccountName, feedInput)
}

// Exists provides a mock function with given fields: balanceAccountName
func (_m *FeedBalances) Exists(balanceAccountName string) (*prometheus.GaugeVec, bool) {
	ret := _m.Called(balanceAccountName)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *prometheus.GaugeVec
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*prometheus.GaugeVec, bool)); ok {
		return rf(balanceAccountName)
	}
	if rf, ok := ret.Get(0).(func(string) *prometheus.GaugeVec); ok {
		r0 = rf(balanceAccountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheus.GaugeVec)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(balanceAccountName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SetBalance provides a mock function with given fields: balance, balanceAccountName, feedInput
func (_m *FeedBalances) SetBalance(balance uint64, balanceAccountName string, feedInput metrics.FeedInput) {
	_m.Called(balance, balanceAccountName, feedInput)
}

// NewFeedBalances creates a new instance of FeedBalances. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedBalances(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedBalances {
	mock := &FeedBalances{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
